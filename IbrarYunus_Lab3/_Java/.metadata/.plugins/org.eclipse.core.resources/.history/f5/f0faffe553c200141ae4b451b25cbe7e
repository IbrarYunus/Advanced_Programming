import java.io.IOException;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Date;

import javax.swing.JOptionPane;

/**
 * A TCP server that runs on port 9090.  When a client connects, it
 * sends the client the current date and time, then closes the
 * connection with that client.  Arguably just about the simplest
 * server you can write.
 */
public class Server {

    /**
     * Runs the server.
     */
    public static void main(String[] args) throws IOException 
    {
    	System.out.println("Server Intialized\n");
    	System.out.println("Grabbing a Socket");
    	ServerSocket listener = new ServerSocket(5556);
        try {
            while (true) 
            {
            	System.out.println("Listener Initiated");
                Socket socket = listener.accept();
                System.out.println("Connection Accepted");
                try {
                	String fileName = JOptionPane.showInputDialog("Enter File Name");
                	_OpenFile(fileName);
                	System.out.println("Sending File Name");
                    PrintWriter out =
                    new PrintWriter(socket.getOutputStream(), true);
                    out.println(fileName);
                	} 
                finally 
                	{
                    socket.close();
                    System.exit(0);
                	}
            }
        }
        finally {
            listener.close();
        }
    }
    
    
    
    public static void _OpenFile( String fileName)
    {
    	System.out.println("In the _OpenFile function");
    	System.out.println("Trying to open: " + fileName);    	
    	
    	System.out.print("\n\n\n");
    }
    
}